{
  "api": {
    "name": "AdMobPlugin",
    "slug": "admobplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "initialize",
        "signature": "(options: AdMobInitializationOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "AdMobInitializationOptions",
            "type": "AdMobInitializationOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Initialize",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "options",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "AdMobInitializationOptions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "1.1.2",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Initialize AdMob with AdMobInitializationOptions",
        "complexTypes": [
          "AdMobInitializationOptions"
        ],
        "slug": "initialize"
      },
      {
        "name": "trackingAuthorizationStatus",
        "signature": "() => Promise<TrackingAuthorizationStatusInterface>",
        "parameters": [],
        "returns": "Promise<TrackingAuthorizationStatusInterface>",
        "tags": [
          {
            "name": "see",
            "text": [
              {
                "text": "https",
                "kind": "text"
              },
              {
                "text": "://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547038-trackingauthorizationstatus",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "3.1.0",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Confirm requestTrackingAuthorization status (iOS >14)",
        "complexTypes": [
          "TrackingAuthorizationStatusInterface"
        ],
        "slug": "trackingauthorizationstatus"
      },
      {
        "name": "showBanner",
        "signature": "(options: BannerAdOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "AdOptions",
            "type": "BannerAdOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Banner",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "options",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "AdOptions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "1.1.2",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Show a banner Ad",
        "complexTypes": [
          "BannerAdOptions"
        ],
        "slug": "showbanner"
      },
      {
        "name": "hideBanner",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Banner",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "1.1.2",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Hide the banner, remove it from screen, but can show it later",
        "complexTypes": [],
        "slug": "hidebanner"
      },
      {
        "name": "resumeBanner",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Banner",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "1.1.2",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Resume the banner, show it after hide",
        "complexTypes": [],
        "slug": "resumebanner"
      },
      {
        "name": "removeBanner",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Banner",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "1.1.2",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Destroy the banner, remove it from screen.",
        "complexTypes": [],
        "slug": "removebanner"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.SizeChanged, listenerFunc: (info: AdMobBannerSize) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "bannerAdSizeChanged",
            "type": "BannerAdPluginEvents.SizeChanged"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(info: AdMobBannerSize) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Banner",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "eventName",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "bannerAdSizeChanged",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "listenerFunc",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "3.0.0",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents",
          "AdMobBannerSize"
        ],
        "slug": "addlistenerbanneradplugineventssizechanged-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.Loaded, listenerFunc: () => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "bannerAdLoaded",
            "type": "BannerAdPluginEvents.Loaded"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Banner",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "eventName",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "bannerAdLoaded",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "listenerFunc",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "3.0.0",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Notice: request loaded Banner ad",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents"
        ],
        "slug": "addlistenerbanneradplugineventsloaded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.FailedToLoad, listenerFunc: (info: AdMobError) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "bannerAdFailedToLoad",
            "type": "BannerAdPluginEvents.FailedToLoad"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(info: AdMobError) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Banner",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "eventName",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "bannerAdFailedToLoad",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "listenerFunc",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "3.0.0",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Notice: request failed Banner ad",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerbanneradplugineventsfailedtoload-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.Opened, listenerFunc: () => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "bannerAdOpened",
            "type": "BannerAdPluginEvents.Opened"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Banner",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "eventName",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "bannerAdOpened",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "listenerFunc",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "3.0.0",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Notice: full-screen banner view will be presented in response to the user clicking on an ad.",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents"
        ],
        "slug": "addlistenerbanneradplugineventsopened-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.Closed, listenerFunc: () => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "bannerAdClosed",
            "type": "BannerAdPluginEvents.Closed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Banner",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "eventName",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "bannerAdClosed",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "listenerFunc",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "3.0.0",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Notice: The full-screen banner view will been dismissed.",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents"
        ],
        "slug": "addlistenerbanneradplugineventsclosed-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.AdImpression, listenerFunc: () => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "AdImpression",
            "type": "BannerAdPluginEvents.AdImpression"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Banner",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "eventName",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "AdImpression",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "listenerFunc",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "3.0.0",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Unimplemented",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents"
        ],
        "slug": "addlistenerbanneradplugineventsadimpression-"
      },
      {
        "name": "prepareInterstitial",
        "signature": "(options: AdOptions) => Promise<AdLoadInfo>",
        "parameters": [
          {
            "name": "options",
            "docs": "AdOptions",
            "type": "AdOptions"
          }
        ],
        "returns": "Promise<AdLoadInfo>",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Interstitial",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "options",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "AdOptions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "1.1.2",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Prepare interstitial banner",
        "complexTypes": [
          "AdLoadInfo",
          "AdOptions"
        ],
        "slug": "prepareinterstitial"
      },
      {
        "name": "showInterstitial",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "Interstitial",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "1.1.2",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Show interstitial ad when it’s ready",
        "complexTypes": [],
        "slug": "showinterstitial"
      },
      {
        "name": "addListener",
        "signature": "(eventName: InterstitialAdPluginEvents.FailedToLoad, listenerFunc: (error: AdMobError) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "InterstitialAdPluginEvents.FailedToLoad"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: AdMobError) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "InterstitialAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerinterstitialadplugineventsfailedtoload-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: InterstitialAdPluginEvents.Loaded, listenerFunc: (info: AdLoadInfo) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "InterstitialAdPluginEvents.Loaded"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(info: AdLoadInfo) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "InterstitialAdPluginEvents",
          "AdLoadInfo"
        ],
        "slug": "addlistenerinterstitialadplugineventsloaded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: InterstitialAdPluginEvents.Dismissed, listenerFunc: () => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "InterstitialAdPluginEvents.Dismissed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "InterstitialAdPluginEvents"
        ],
        "slug": "addlistenerinterstitialadplugineventsdismissed-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: InterstitialAdPluginEvents.FailedToShow, listenerFunc: (error: AdMobError) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "InterstitialAdPluginEvents.FailedToShow"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: AdMobError) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "InterstitialAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerinterstitialadplugineventsfailedtoshow-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: InterstitialAdPluginEvents.Showed, listenerFunc: () => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "InterstitialAdPluginEvents.Showed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "InterstitialAdPluginEvents"
        ],
        "slug": "addlistenerinterstitialadplugineventsshowed-"
      },
      {
        "name": "prepareRewardVideoAd",
        "signature": "(options: RewardAdOptions) => Promise<AdLoadInfo>",
        "parameters": [
          {
            "name": "options",
            "docs": "RewardAdOptions",
            "type": "RewardAdOptions"
          }
        ],
        "returns": "Promise<AdLoadInfo>",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "RewardVideo",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "options",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "RewardAdOptions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "1.1.2",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Prepare a reward video ad",
        "complexTypes": [
          "AdLoadInfo",
          "RewardAdOptions"
        ],
        "slug": "preparerewardvideoad"
      },
      {
        "name": "showRewardVideoAd",
        "signature": "() => Promise<AdMobRewardItem>",
        "parameters": [],
        "returns": "Promise<AdMobRewardItem>",
        "tags": [
          {
            "name": "group",
            "text": [
              {
                "text": "RewardVideo",
                "kind": "text"
              }
            ]
          },
          {
            "name": "since",
            "text": [
              {
                "text": "1.1.2",
                "kind": "text"
              }
            ]
          }
        ],
        "docs": "Show a reward video ad",
        "complexTypes": [
          "AdMobRewardItem"
        ],
        "slug": "showrewardvideoad"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.FailedToLoad, listenerFunc: (error: AdMobError) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.FailedToLoad"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: AdMobError) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerrewardadplugineventsfailedtoload-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.Loaded, listenerFunc: (info: AdLoadInfo) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.Loaded"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(info: AdLoadInfo) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents",
          "AdLoadInfo"
        ],
        "slug": "addlistenerrewardadplugineventsloaded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.Rewarded, listenerFunc: (reward: AdMobRewardItem) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.Rewarded"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(reward: AdMobRewardItem) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents",
          "AdMobRewardItem"
        ],
        "slug": "addlistenerrewardadplugineventsrewarded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.Dismissed, listenerFunc: () => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.Dismissed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents"
        ],
        "slug": "addlistenerrewardadplugineventsdismissed-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.FailedToShow, listenerFunc: (error: AdMobError) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.FailedToShow"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: AdMobError) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerrewardadplugineventsfailedtoshow-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.Showed, listenerFunc: () => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.Showed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents"
        ],
        "slug": "addlistenerrewardadplugineventsshowed-"
      }
    ],
    "properties": [],
    "importObject": [
      "BannerDefinitions",
      "InterstitialDefinitions",
      "RewardDefinitions",
      "TrackingAuthorizationStatusInterface",
      "AdMobDefinitions",
      "AdMobInitializationOptions",
      "MaxAdContentRating"
    ]
  },
  "interfaces": [
    {
      "name": "AdMobInitializationOptions",
      "slug": "admobinitializationoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "requestTrackingAuthorization",
          "tags": [
            {
              "text": [
                {
                  "text": "https",
                  "kind": "text"
                },
                {
                  "text": "://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547037-requesttrackingauthorization?changes=latest_minor",
                  "kind": "text"
                }
              ],
              "name": "see"
            },
            {
              "text": [
                {
                  "text": "1.1.2",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "Use or not requestTrackingAuthorization in iOS(>14)",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "testingDevices",
          "tags": [
            {
              "text": [
                {
                  "text": "https",
                  "kind": "text"
                },
                {
                  "text": "://developers.google.com/admob/android/test-ads#enable_test_devices",
                  "kind": "text"
                }
              ],
              "name": "see"
            },
            {
              "text": [
                {
                  "text": "1.2.0",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "An Array of devices IDs that will be marked as tested devices if {@link AdMobInitializationOptions.initializeForTesting} is true\r\n(Real Ads will be served to Testing devices but they will not count as 'real').",
          "complexTypes": [],
          "type": "string[] | undefined"
        },
        {
          "name": "initializeForTesting",
          "tags": [
            {
              "text": [
                {
                  "text": "AdMobInitializationOptions.testingDevices",
                  "kind": "text"
                },
                {
                  "text": " ",
                  "kind": "space"
                },
                {
                  "text": "*",
                  "kind": "text"
                }
              ],
              "name": "see"
            },
            {
              "text": [
                {
                  "text": "false",
                  "kind": "text"
                }
              ],
              "name": "default"
            },
            {
              "text": [
                {
                  "text": "1.2.0",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "If set to true, the devices on {@link AdMobInitializationOptions.testingDevices} will\r\nbe registered to receive test production ads.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "tagForChildDirectedTreatment",
          "tags": [
            {
              "text": [
                {
                  "text": "https",
                  "kind": "text"
                },
                {
                  "text": "://developers.google.com/admob/android/targeting#child-directed_setting",
                  "kind": "text"
                }
              ],
              "name": "see"
            },
            {
              "text": [
                {
                  "text": "3.1.0",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "For purposes of the Children's Online Privacy Protection Act (COPPA),\r\nthere is a setting called tagForChildDirectedTreatment.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "tagForUnderAgeOfConsent",
          "tags": [
            {
              "text": [
                {
                  "text": "https",
                  "kind": "text"
                },
                {
                  "text": "://developers.google.com/admob/android/targeting#users_under_the_age_of_consent",
                  "kind": "text"
                }
              ],
              "name": "see"
            },
            {
              "text": [
                {
                  "text": "3.1.0",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "When using this feature,\r\na Tag For Users under the Age of Consent in Europe (TFUA) parameter will be included in all future ad requests.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "maxAdContentRating",
          "tags": [
            {
              "text": [
                {
                  "text": "https",
                  "kind": "text"
                },
                {
                  "text": "://developers.google.com/admob/android/targeting#child-directed_setting",
                  "kind": "text"
                }
              ],
              "name": "see"
            },
            {
              "text": [
                {
                  "text": "3.1.0",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "WAs an app developer,\r\nyou can indicate whether you want Google to treat your content as child-directed when you make an ad request.",
          "complexTypes": [
            "MaxAdContentRating"
          ],
          "type": "MaxAdContentRating"
        }
      ],
      "importObject": [
        "BannerDefinitions",
        "InterstitialDefinitions",
        "RewardDefinitions",
        "TrackingAuthorizationStatusInterface",
        "AdMobDefinitions",
        "AdMobPlugin",
        "MaxAdContentRating"
      ]
    },
    {
      "name": "TrackingAuthorizationStatusInterface",
      "slug": "trackingauthorizationstatusinterface",
      "docs": "",
      "tags": [
        {
          "text": [
            {
              "text": "https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus",
              "kind": "text"
            }
          ],
          "name": "url"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "status",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "'authorized' | 'denied' | 'notDetermined' | 'restricted'"
        }
      ],
      "importObject": []
    },
    {
      "name": "BannerAdOptions",
      "slug": "banneradoptions",
      "docs": "This interface extends AdOptions",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "adSize",
          "tags": [
            {
              "text": [
                {
                  "text": "ADAPTIVE_BANNER",
                  "kind": "text"
                }
              ],
              "name": "default"
            },
            {
              "text": [
                {
                  "text": "3.0.0",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "Banner Ad Size, defaults to ADAPTIVE_BANNER.\r\nIT can be: ADAPTIVE_BANNER, SMART_BANNER, BANNER,\r\nMEDIUM_RECTANGLE, FULL_BANNER, LEADERBOARD",
          "complexTypes": [
            "BannerAdSize"
          ],
          "type": "BannerAdSize"
        },
        {
          "name": "position",
          "tags": [
            {
              "text": [
                {
                  "text": "TOP_CENTER",
                  "kind": "text"
                }
              ],
              "name": "default"
            },
            {
              "text": [
                {
                  "text": "1.1.2",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "Set Banner Ad position.\r\nTOP_CENTER or CENTER or BOTTOM_CENTER",
          "complexTypes": [
            "BannerAdPosition"
          ],
          "type": "BannerAdPosition"
        }
      ],
      "importObject": [
        "AdOptions",
        "BannerAdPosition",
        "BannerAdSize"
      ]
    },
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ],
      "importObject": [
        "PluginRegistry",
        "CapacitorException",
        "CapacitorGlobal",
        "RegisterPlugin",
        "PluginImplementations",
        "Plugin",
        "PermissionState",
        "PluginResultData",
        "PluginResultError",
        "PluginCallback"
      ]
    },
    {
      "name": "AdMobBannerSize",
      "slug": "admobbannersize",
      "docs": "When notice listener of OnAdLoaded, you can get banner size.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "width",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "height",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        }
      ],
      "importObject": []
    },
    {
      "name": "AdMobError",
      "slug": "admoberror",
      "docs": "For more information\r\nhttps://developers.google.com/android/reference/com/google/android/gms/ads/AdError",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "code",
          "tags": [],
          "docs": "Gets the error's code.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "message",
          "tags": [],
          "docs": "Gets the message describing the error.",
          "complexTypes": [],
          "type": "string"
        }
      ],
      "importObject": []
    },
    {
      "name": "AdLoadInfo",
      "slug": "adloadinfo",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "adUnitId",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ],
      "importObject": []
    },
    {
      "name": "AdOptions",
      "slug": "adoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "adId",
          "tags": [
            {
              "text": [
                {
                  "text": "https",
                  "kind": "text"
                },
                {
                  "text": "://support.google.com/admob/answer/7356431?hl=en",
                  "kind": "text"
                }
              ],
              "name": "see"
            },
            {
              "text": [
                {
                  "text": "1.1.2",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "The ad unit ID that you want to request",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "isTesting",
          "tags": [
            {
              "text": [
                {
                  "text": "false",
                  "kind": "text"
                }
              ],
              "name": "default"
            },
            {
              "text": [
                {
                  "text": "1.1.2",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "You can use test mode of ad.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "margin",
          "tags": [
            {
              "text": [
                {
                  "text": "0",
                  "kind": "text"
                }
              ],
              "name": "default"
            },
            {
              "text": [
                {
                  "text": "1.1.2",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "Margin Banner. Default is 0px;\r\nIf position is BOTTOM_CENTER, margin is be margin-bottom.\r\nIf position is TOP_CENTER, margin is be margin-top.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "npa",
          "tags": [
            {
              "text": [
                {
                  "text": "https",
                  "kind": "text"
                },
                {
                  "text": "://developers.google.com/admob/ios/eu-consent",
                  "kind": "text"
                }
              ],
              "name": "see"
            },
            {
              "text": [
                {
                  "text": "https",
                  "kind": "text"
                },
                {
                  "text": "://developers.google.com/admob/android/eu-consent",
                  "kind": "text"
                }
              ],
              "name": "see"
            },
            {
              "text": [
                {
                  "text": "false",
                  "kind": "text"
                }
              ],
              "name": "default"
            },
            {
              "text": [
                {
                  "text": "1.2.0",
                  "kind": "text"
                }
              ],
              "name": "since"
            }
          ],
          "docs": "The default behavior of the Google Mobile Ads SDK is to serve personalized ads.\r\nSet this to true to request Non-Personalized Ads",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ],
      "importObject": []
    },
    {
      "name": "RewardAdOptions",
      "slug": "rewardadoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "ssv",
          "tags": [
            {
              "text": [
                {
                  "text": "https",
                  "kind": "text"
                },
                {
                  "text": "://support.google.com/admob/answer/9603226?hl=en-GB",
                  "kind": "text"
                }
              ],
              "name": "see"
            }
          ],
          "docs": "If you have enabled SSV in your AdMob Application. You can provide customData or\r\na userId be passed to your callback to do further processing on.\r\n\r\n*Important* You *HAVE* to define one of them.",
          "complexTypes": [
            "AtLeastOne"
          ],
          "type": "AtLeastOne<{\r\n    /**\r\n     * An optional UserId to pass to your SSV callback function.\r\n     */\r\n    userId: string;\r\n    /**\r\n     * An optional custom set of data to pass to your SSV callback function.\r\n     */\r\n    customData: string;\r\n  }>"
        }
      ],
      "importObject": [
        "AdOptions",
        "AtLeastOne"
      ]
    },
    {
      "name": "AdMobRewardItem",
      "slug": "admobrewarditem",
      "docs": "For more information\r\nhttps://developers.google.com/admob/android/rewarded-video-adapters?hl=en",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "tags": [],
          "docs": "Rewarded type user got",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "amount",
          "tags": [],
          "docs": "Rewarded amount user got",
          "complexTypes": [],
          "type": "number"
        }
      ],
      "importObject": []
    }
  ],
  "enums": [
    {
      "name": "MaxAdContentRating",
      "slug": "maxadcontentrating",
      "members": [
        {
          "name": "General",
          "value": "'General'",
          "tags": [],
          "docs": "Content suitable for general audiences, including families."
        },
        {
          "name": "ParentalGuidance",
          "value": "'ParentalGuidance'",
          "tags": [],
          "docs": "Content suitable for most audiences with parental guidance."
        },
        {
          "name": "Teen",
          "value": "'Teen'",
          "tags": [],
          "docs": "Content suitable for teen and older audiences."
        },
        {
          "name": "MatureAudience",
          "value": "'MatureAudience'",
          "tags": [],
          "docs": "Content suitable only for mature audiences."
        }
      ]
    },
    {
      "name": "BannerAdSize",
      "slug": "banneradsize",
      "members": [
        {
          "name": "BANNER",
          "value": "'BANNER'",
          "tags": [],
          "docs": "Mobile Marketing Association (MMA)\r\nbanner ad size (320x50 density-independent pixels)."
        },
        {
          "name": "FULL_BANNER",
          "value": "'FULL_BANNER'",
          "tags": [],
          "docs": "Interactive Advertising Bureau (IAB)\r\nfull banner ad size (468x60 density-independent pixels)."
        },
        {
          "name": "LARGE_BANNER",
          "value": "'LARGE_BANNER'",
          "tags": [],
          "docs": "Large banner ad size (320x100 density-independent pixels)."
        },
        {
          "name": "MEDIUM_RECTANGLE",
          "value": "'MEDIUM_RECTANGLE'",
          "tags": [],
          "docs": "Interactive Advertising Bureau (IAB)\r\nmedium rectangle ad size (300x250 density-independent pixels)."
        },
        {
          "name": "LEADERBOARD",
          "value": "'LEADERBOARD'",
          "tags": [],
          "docs": "Interactive Advertising Bureau (IAB)\r\nleaderboard ad size (728x90 density-independent pixels)."
        },
        {
          "name": "ADAPTIVE_BANNER",
          "value": "'ADAPTIVE_BANNER'",
          "tags": [],
          "docs": "A dynamically sized banner that is full-width and auto-height."
        },
        {
          "name": "SMART_BANNER",
          "value": "'SMART_BANNER'",
          "tags": [
            {
              "text": [
                {
                  "text": "Will be removed in next AdMob versions use `ADAPTIVE_BANNER`\r\nScreen width x 32|50|90",
                  "kind": "text"
                }
              ],
              "name": "deprecated"
            }
          ],
          "docs": ""
        }
      ]
    },
    {
      "name": "BannerAdPosition",
      "slug": "banneradposition",
      "members": [
        {
          "name": "TOP_CENTER",
          "value": "'TOP_CENTER'",
          "tags": [],
          "docs": "Banner position be top-center"
        },
        {
          "name": "CENTER",
          "value": "'CENTER'",
          "tags": [],
          "docs": "Banner position be center"
        },
        {
          "name": "BOTTOM_CENTER",
          "value": "'BOTTOM_CENTER'",
          "tags": [],
          "docs": "Banner position be bottom-center(default)"
        }
      ]
    },
    {
      "name": "BannerAdPluginEvents",
      "slug": "banneradpluginevents",
      "members": [
        {
          "name": "SizeChanged",
          "value": "\"bannerAdSizeChanged\"",
          "tags": [],
          "docs": ""
        },
        {
          "name": "Loaded",
          "value": "\"bannerAdLoaded\"",
          "tags": [],
          "docs": ""
        },
        {
          "name": "FailedToLoad",
          "value": "\"bannerAdFailedToLoad\"",
          "tags": [],
          "docs": ""
        },
        {
          "name": "Opened",
          "value": "\"bannerAdOpened\"",
          "tags": [],
          "docs": "Open \"Adsense\" Event after user click banner"
        },
        {
          "name": "Closed",
          "value": "\"bannerAdClosed\"",
          "tags": [],
          "docs": "Close \"Adsense\" Event after user click banner"
        },
        {
          "name": "AdImpression",
          "value": "\"bannerAdImpression\"",
          "tags": [],
          "docs": "Similarly, this method should be called when an impression is recorded for the ad by the mediated SDK."
        }
      ]
    },
    {
      "name": "InterstitialAdPluginEvents",
      "slug": "interstitialadpluginevents",
      "members": [
        {
          "name": "Loaded",
          "value": "'interstitialAdLoaded'",
          "tags": [],
          "docs": "Emits after trying to prepare and Interstitial, when it is loaded and ready to be show"
        },
        {
          "name": "FailedToLoad",
          "value": "'interstitialAdFailedToLoad'",
          "tags": [],
          "docs": "Emits after trying to prepare and Interstitial, when it could not be loaded"
        },
        {
          "name": "Showed",
          "value": "'interstitialAdShowed'",
          "tags": [],
          "docs": "Emits when the Interstitial ad is visible to the user"
        },
        {
          "name": "FailedToShow",
          "value": "'interstitialAdFailedToShow'",
          "tags": [],
          "docs": "Emits when the Interstitial ad is failed to show"
        },
        {
          "name": "Dismissed",
          "value": "'interstitialAdDismissed'",
          "tags": [],
          "docs": "Emits when the Interstitial ad is not visible to the user anymore."
        }
      ]
    },
    {
      "name": "RewardAdPluginEvents",
      "slug": "rewardadpluginevents",
      "members": [
        {
          "name": "Loaded",
          "value": "'onRewardedVideoAdLoaded'",
          "tags": [],
          "docs": "Emits after trying to prepare a RewardAd and the Video is loaded and ready to be show"
        },
        {
          "name": "FailedToLoad",
          "value": "'onRewardedVideoAdFailedToLoad'",
          "tags": [],
          "docs": "Emits after trying to prepare a RewardAd when it could not be loaded"
        },
        {
          "name": "Showed",
          "value": "'onRewardedVideoAdShowed'",
          "tags": [],
          "docs": "Emits when the AdReward video is visible to the user"
        },
        {
          "name": "FailedToShow",
          "value": "'onRewardedVideoAdFailedToShow'",
          "tags": [],
          "docs": "Emits when the AdReward video is failed to show"
        },
        {
          "name": "Dismissed",
          "value": "'onRewardedVideoAdDismissed'",
          "tags": [],
          "docs": "Emits when the AdReward video is not visible to the user anymore.\r\n\r\n**Important**: This has nothing to do with the reward it self. This event\r\nwill emits in this two cases:\r\n1. The user starts the video ad but close it before the reward emit.\r\n2. The user start the video and see it until end, then gets the reward\r\nand after that the ad is closed."
        },
        {
          "name": "Rewarded",
          "value": "'onRewardedVideoAdReward'",
          "tags": [],
          "docs": "Emits when user get rewarded from AdReward"
        }
      ]
    }
  ],
  "typeAliases": [
    {
      "name": "AtLeastOne",
      "slug": "atleastone",
      "docs": "",
      "types": [
        {
          "text": "{[K in keyof T]: Pick<T, K>}[keyof T]",
          "complexTypes": [
            "T",
            "Pick",
            "K"
          ]
        }
      ]
    },
    {
      "name": "Pick",
      "slug": "pick",
      "docs": "From T, pick a set of properties whose keys are in the union K",
      "types": [
        {
          "text": "{\r\n    [P in K]: T[P];\r\n}",
          "complexTypes": [
            "K",
            "T",
            "P"
          ]
        }
      ]
    }
  ],
  "pluginConfigs": []
}